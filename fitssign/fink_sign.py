#!/usr/bin/python

import struct 
import sys
import curses.ascii
import itertools


KEYWORD_FORMAT = '%-8s=%22s '
FITS_SIZE=2880
HEADER_SIZE=2880

def main(argv=None):
    if argv is None:
        argv = sys.argv
    
    filename = argv[1]
    
    convertFits(filename)
    return 0

'''
Extract a plane from a FITS image generated by OBJ2FITS.
The plane will be converted from an unsigned int array to signed.
'''
def convertFits(filename):
    if filename.endswith('.fits'):
        fitsData = open(filename).read()
        newFitsData = convertPlane(fitsData)
        
        header = fitsData[:HEADER_SIZE]
        newHeader = addScaleKeywords(header)
        
        outFileName = filename.replace('.fits', '.signed.fits')
        writeFits(outFileName, newHeader, newFitsData)
    else:
        raise Exception('not a fits file')



'''
Extract a plane from the fits image data and convert it to signed
'''
def convertPlane(buffer):
    planeBufferUnsigned = getPlane(buffer, HEADER_SIZE)
    planeBufferSigned = unsignedToSigned(planeBufferUnsigned)
    return pad(planeBufferSigned, chr(0))
    
'''
Extract a plane from the fits image data.
'''
def getPlane(buf, offset):
    start = offset
    return buf[start:]

'''
Convert an unsigned plane into signed
'''
def unsignedToSigned(buf):
    vals = [struct.unpack('!H', buf[start:start+2])[0] for start in range(0, len(buf), 2)]
    offset_vals = [x-32768 for x in vals]
    return  ''.join((struct.pack('!h', val) for val in offset_vals))
    

'''
Pad a plane to a multiple of 2880 bytes.
'''
def pad(buf, padchar):
    return buf.ljust(roundUpToMultiple(len(buf), FITS_SIZE), padchar)

'''
Rounds a number up to the next multiple of factor.
'''
def roundUpToMultiple(val, factor):
    if val % factor == 0:
        return val
    else:
        return val + factor - (val % factor)
        
def isNotEnd(line):
    return not line.startswith('END')
    
def getHeaderLines(header):
    lines = [header[start:start+80] for start in range(0, len(header), 80)]
    return [x for x in itertools.takewhile(isNotEnd, lines)]
    
def makeHeaderLine(name, val):
    return (KEYWORD_FORMAT % (name, val)).ljust(80)

def makeHeader(lines):
    header = ''.join(lines) + 'END'.ljust(80)
    return header
    
def addScaleKeywords(header):
    headerlines = getHeaderLines(header)
    headerlines.append(makeHeaderLine("BSCALE", "1"))
    headerlines.append(makeHeaderLine("BZERO", "32768"))
    newHeader = pad(makeHeader(headerlines), ' ')
    return newHeader

'''
Writes the given header and FITS data to a file.
'''
def writeFits(outFileName, header, newFitsData):
    outFile = open(outFileName, 'wb')
    outFile.write(header)
    outFile.write(newFitsData)
    outFile.close()


if __name__ == '__main__':
    sys.exit(main())